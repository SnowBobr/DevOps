Ctntos 9


Структура команд

    Команда + Опцыи + Аргумент


Базовые команды

    su  --  (sudo - s)  -  переключаемся на выполнение из под рута

    pwd   --   показывает текущую дерикторию

    ls  --  выводит файлы и каталоги в текущей дериктории
        ls -l  -- выводит файлы и каталоги в текущей дериктории списком
        ls -la -- выводит все файлы в том числе и скрытые файлы
        ls -la /home -- выводит все файлы в том числе и скрытые файлы, но не в текущем каталоге,  а в каталоге "home"
        ls -lad /home -- выводит информацию и права доступа каталога "home"
        ls -laR /home -- с рекурсивным флагом, выводит все файлы и каталоги, и файлы и подкаталоги вложенных каталогов
        

    man ls (любая другая команда)  --  man это справочная информация по команде, есть ко всем командам, очень подробная информация

    cp  --  команда копирования файла, принимает два аргумента: откуда и куда копируем, можно использовать как полный путь так и относительный
        следует помнить что если такой файл уже есть и он будет перезаписан
        что бы не просто скопировать, а и переименовать фалй в итоговом каталоге - во втором аргументе необходимо прописать 
        новое название файла
        если копировать множество файлов, то все аргументы кроме последнего это какие файлы мы копируем, а последний - куда копируем

        cp -r -- флаг рекурсива - таким образом можно скопировать целую папку
    
    rm  --  команда для удаления файла
        rm -f  --  флаг форсе - удалит  файл и даже не попросит подтверждения
        rm -rf -- флаг рекурсива + флаг форсе - таким образом можно удалить целую папку
    
    touch  --  команда для создания файла

    mv  --  команда для переименования или перемещения файлов и каталогов, если не прописаны пути то переименует,
        если прописаны - переместить

    mkdir  --  команда для создания каталога
        mkdir -p test1/test2/test3 --  команда для создания каталога с подкаталогами

    uptime  --  показывает текущие параметры сервера
        время, сколько сервер работает с момента запуска, количество пользователей, и нагрузка за последние 5/10/15 минут
        эти числа не должны превышать число киличества ядер проца, иначе работает с перегрузом

    which  --  позволяет узнать где находиться исполняемый файл

    alias  --  типа ярлыка в винде, но не совсем
        с помощью этой команды создаеться файл с параметрами что нам надо выполнить, это может быть как вывод текста,
        так и запуск программы с параметрами или еще что-то
        alias hi="echo 'hello Admin'"
        ЭТИ ФАЙЛЫ ВРЕМЕННЫЕ  - ПОСЛЕ РЕБУТА ОНИ ИСЧЕЗНУТ

    who  --  покажет список пользователей залогиненых на сервер

    whoami  -- покажет под каким я сейчас пользователем

    logname  --  покажет под каким пользователем я залогинился в систему

    hostname (hostnamectl)  --  показывает имя машины, показывает более подробную информацию о системе

    timedatectl  --  показывает информацию о времени ти дате на сервере, подробно


ТЕКСТОВЫЙ РЕДАКТОР

     vi  --  открывает файл для редактирования, если его нету, создаст и откроет

     тот же редактор но новее и красивее
     vim  --  открывает файл для редактирования, если его нету, создаст и откроет

     cat  --  выводит на экран содержимое текстового файла без редактирования

    как по мне сложная и неудобная хрень, но надо учиться )))))

        i  --  для входа в режим редактирования
        кнопка esc  --  для выхода из режима
        :w  -- для сохранения
        :wq  --  для сохранения и выхода из редактора
        :q!  --  выйти без сохранения изменений
        кнопка U  -- выйти не записав последние изменения


Выполнение скриптов

    необходимо помнить что когда мы прописываем выполнение любого скрипта или программы
    система ищет их в нашем каталоге bin, так как это наш PATH  - место где храняться бинарники ,как и в винде
    но если нам нужно выполнить скрипт который не предустановлен или не прописан
    то это будет выглядеть таким образом
    ./test.sh  --  где  ./ это относительный путь - текущий каталог, test.sh - имя самого скрипта


NETWORK

    dhclient  --  получаем сетевой адрес от виртуалбокса, на моей версии ОСи это излишнее, я и так его получил,
        но на других конфигурациях может пригодиться

    ip addr  --  показывает все сетевые карты и их настройки

    получив сетевые адреса, если это виртуальная машина, интересует адрес на подобии : enp0s3
        но точно не - lo, virtual

    Что бы настроить SSH доступ нам необходимо:

        в первую очередь отключить файрвол
        systemctl stop firewalld
        systemctl disable firewalld

        далее запускаем ссш и добавляем его в автозагрузку

        systemctl start sshd
        systemctl enable sshd

        далее идем в файл конфигурации сетевого соединения и открываем его в редакторе

        vim /etc/sysconfig/network-scripts/ifcfg-enp0s3  последний блок - название сетевого контроллера
            внутри есть настройка ONBOOT=yes    должно быть yes, тогда будет работать с автозагрузки

        на моей системе соединение было в /etc/NetworkManager/ ну и далее , вобщем омжно найти и єто не сложно
            правда настройки не такие как в класическом сетевом интерфейсе и нету єтого значения онбут  


        заходим в командную строку винды и запускаем команду ipconfig что бы глянуть свои сетевые интерфейсы
            посмотрев записываем себе свой сетевой адрес, для обращения через который необходимо настроить проброс портов

        далее заходим в настройки виртуальной машины, настройки сети, дополнительно, проброс портов
            создаем новое правило и там имя/адрес локальной машины/порт (2222)/адрес виртуальной машины/порт(22)
            так и выходит правило портмэпинга
            
        далее ставим патти, сохраняем настройки и у нас есть доступ к виртуальному серверу, можно работать без всякой мутоты


        прописываем смело команду, что бы отключить графический интерфейс
        systemctl set-default multi-user.target 
        и далее пользоваться патти для работы с серваком
        главное не забыть ребутнуть сервак )))


USERS and GROUPS

    id {имя пользователя} покажет нам информацыю о пользователей
            uid=1000(test) gid=1000(test) groups=1000(test),10(wheel)
                uid --  уникальный id
                gid --  стандартная группа пользователя
                groups  --  группы к которым принадлежит пользователь

    vim /etc/passwd  --  открыть файл с настройками всех пользователей системы
        желательно никогда не трогать его руками, очень легко все испортить к чертям

    vim /etc/passwd  -- открыть файл с зашифрованными паролями всех пользователей системы
        test:$6$kT/esmPBKYRQo.F4$KOVqqRPWY2/wCGqONOH6meqRF/rnq8eKFV5Pk1v/w/Y9bFDxDNNUqPfDAvDdr26ntsLC0BvPcGTixTXpPF3FB/::0:99999:7:::
            аналогично как и в пользователях все данные разбиты на блоки через двоеточие
            первое - ник
            второе - пароль
            третее - когда последний раз был сменен пароль (отсчет от июля 1970 года в днях)
            четвертое - через сколько дней можно в следующий раз сменить пароль
            пятое - через сколько дней пароль станет не действительным
            шестое - за сколько дней до истечения срока пароля уведомить пользователя
            седьмое - можно поставить срок годности аккаунту (отсчет от июля 1970 года в днях) 
            восьмое - зарезервировано, пока не имеет назначения

    useradd {имя пользователя} -- создаем пользователя
    passwd {имя пользователя} -- создаем / изменяем  пароль пользователю
    userdel {имя пользователя} -- удалить пользователя
    userdel -r {имя пользователя} -- удалить пользователя и домашнюю дирректорию
    groupadd {имя группы} -- создаем группу пользователей

    vim /etc/default/useradd -- открыть файл с настройками создаваемых пользователей:
        группа, домашний каталог, SKEL - откуда копируються файлы для юзера, SHELL - что запускать при входе юзера

    в каталоге пользователя всегда есть два скрытых и очень важных файла
        .bashrc --  окружение пользователя, при каждой сессии загружает все оттуда
        .bash_profile  --  отвечает за то что будет происходить при первом логине на сервер

    есть еще глобальные настройки для всех пользователей они находяться:
        /etc/bash_completion.d/bushrc
        /etc/profile.d/protocols

    vim /etc/login.defs -- открыть файл с настройками создаваемых пользователей:
        тут можно много чего поменять

    chage -l {имя пользователя} -- можно посмотреть информацию в нормальном виде о состоянии пароля пользователя
        тут же можно их и поменять

        chage -E 2030-01-13 -m 3 -M 600 -W 3 kurwabobr

        таким образом прописано:
            когда истекает срок аккаунта
            сколько дней его нельзя поменять
            через сколько дней его обязательно надо поменять
            за сколько дней напомнить что надо сменить
    
    /etc/sudoers  --  настройки рутового доступа пользователям, там можно как дать полные права
        так и на выполнение отдельных команд и приложений


ACCESS files and folders

    файлы и папки имеют права доступа на:
        read    - 4 (чтение файлов и просмотр файлов в папке)
        write   - 2 (право изменять и удаляться содержимое внутри папки)
        Execute - 1 (право на запуск чего-то)

    уровень доступа - это сумма числовых значений доступов, максимальный уровень - 7 (4+2+1)

    по умолчанию все файлы при создании получают такие уровни доступа:
        владелец - полный доступ (7), владеющая группа - чтение (4), остальные - ничего (0)

    НА ПРИМЕРЕ

        drwxr-xr-x.  4 root      root       53 Jul 17 18:38 .
        dr-xr-xr-x. 18 root      root      235 Jul 14 16:12 ..
        -rw-r--r--.  1 root      root       21 Jul 15 14:19 bobr
        drwx------.  3 kurwabobr kurwabobr  78 Jul 17 18:47 kurwabobr
        drwxr-xr-x.  2 root      root       18 Jul 15 13:35 learn_test


        drwxr-xr-x.   4 root      root       53 Jul 17 18:38 .
            drwxr - права владельца (может делать все)
            xr - права владеющей групы (просматривать и исполнять)
            x - для всех остальных  (только исполнять)
            root - владелец
            root - владеющая группа

    МЕНЯЕМ ПРАВА ДОСТУПА
        изменяем численным форматом, можно и буквенным, кому как удобней

        chmod 600 learn_test

            этой командой изменяется права доступа:
                владелец - 6 (чтение и запись)
                группа владельца - 0 (без доступа)
                все остальные - 0 (без доступа)

    важно помнить что на папки очень нужно ставить доступ на Execute, без этого может вообще не выполняться ни один скрипт
        и даже простые команды просмотра, вима или прочего тоже не сработают!!!!!

    при создании  новых файлов под рутом важно после перепроверить права доступа к ним, очень часто остаються лазейки 
        минимум для просматривания другими пользователями
        vim очень коварная зараза, если есть права доступа на папку, а на файл нету, то он может перезаписать файл внутри ее
        став владельцем файла. 

    МЕНЯЕМ владельца

        chown {имя нового владельца:имя владеющей группы} {имя папки/файла}
            если нужно только группу - поставить двоеточие и имя группы
            если только владельца - двоеточие и имя группы не нужны

    РАСШИРЕННЫЕ ПРАВА

        добавить такие права можно также числовым методом, добавив перед основными правами еще одну цыфру, нужного доступа:
            chmod 4600 learn_test

        SUID (4)       --  позволяет пользователю временно поднять свои права до рута
            в файле єто обозначается как буква "s" в правах доступа в колонке владельца 
            -rwsr-xr-x. 1 root root 32648 Aug 10  2021 /bin/passwd
            на примере данного демаона - смены пароля, никто не имеет доступа,
            но выполняя демон пользователь временно получает права доступа рута и таким образом может поменять пароль
            так же может обозначаться как "S", если нету права на выполнение:
            drwS------.  2 root      root       18 Jul 15 13:35 learn_test

        SGID (2)       --  тоже самое только действие выполняеться относительно группы
            очень часто используеться для изменения прав доступа к каталогам, что бы ими могли пользоваться несколько групп пользователей
            chmod 2555 testing
            dr-xr-sr-x.  2 root      root        6 Jul 17 21:30 testing
            таким образом все что будет создавать файлы вв данном каталоге получат права доступа группы создателя

        Sticky bit (1) --  устанавливаеться на каталог и ограничивает возможность удаления файлов только владельцем

            так выглядит обычный каталог, где права на удаления не менялись буква"t" в конце:
                drwxrwxrwt. 13 root root 4096 Jul 17 21:49 ..
            так выглядит измененный файл, где права на удаления ИЗМЕНИЛИСЬ буква"T" в конце:
                drwx--S--T.  2 test test   19 Jul 17 21:50 .

            но не стоит забывать что права на удаление остаються у владельца каталога



    ACL Acces Control List  -- список прав доступа
        кастомная фича, не факт что будет установлена на сервере (установлена по умолчанию на CentOS 8 и выше)
        и не на все систем может быть установлена, зависит от файловой системы

        getfacl {имя файла/папки}

            вывод:  --  показывает права доступа

            [test@amber testmod]$ getfacl kurwa
            # file: kurwa
            # owner: root
            # group: test
            # flags: s--
            user::rwx
            group::--x
            other::--x

        позволяет дать права доступа конкретному пользователю

            setfacl -m u:test:rw kurwa

        при просмотре через ls -la, если в концен блока прав стоит знак "+" - значит права на файл расширены для конкретных пользователей

            -rwsrwx--x+  1 root test   28 Jul 17 21:50 kurwa


Установка Пакетов (Программ)

    Скачивать и устанавливать лучше всего из официальных репозиториев соответствующих дистрибутивов

    Поиск по репозиторию
        yum search postgresql -- найдет все совпадения по репозиториям

    Установка пакета автоматическая   YUM
        yum install httpd -- установить пакет

            [root@amber ~]# yum install httpd
            Last metadata expiration check: 1:53:45 ago on Wed 17 Jul 2024 09:29:35 PM CEST.
            Dependencies resolved.
            =====================================================================================================================================================================================================
            Package                                               Architecture                              Version                                          Repository                                    Size
            =====================================================================================================================================================================================================
            Installing:
            httpd                                                 x86_64                                    2.4.57-8.el9                                     appstream                                     48 k
            Installing dependencies:
            apr                                                   x86_64                                    1.7.0-12.el9                                     appstream                                    123 k
            apr-util                                              x86_64                                    1.6.1-23.el9                                     appstream                                     95 k
            apr-util-bdb                                          x86_64                                    1.6.1-23.el9                                     appstream                                     13 k
            centos-logos-httpd                                    noarch                                    90.8-1.el9                                       appstream                                    1.5 M
            httpd-core                                            x86_64                                    2.4.57-8.el9                                     appstream                                    1.5 M
            httpd-filesystem                                      noarch                                    2.4.57-8.el9                                     appstream                                     13 k
            httpd-tools                                           x86_64                                    2.4.57-8.el9                                     appstream                                     83 k
            Installing weak dependencies:
            apr-util-openssl                                      x86_64                                    1.6.1-23.el9                                     appstream                                     15 k
            mod_http2                                             x86_64                                    2.0.26-2.el9                                     appstream                                    163 k
            mod_lua                                               x86_64                                    2.4.57-8.el9                                     appstream                                     60 k

            Transaction Summary
            =====================================================================================================================================================================================================
            Install  11 Packages

            Total download size: 3.6 M
            Installed size: 8.6 M
            Is this ok [y/N]:

            первое  --  Installing: показывает какой конкретно пакет устанавливается, версия, размер
            второе  --  Installing dependencies: показывает какие зависимости необходимы и что он собираеться 
                        установить для корректной работы
            третее  -- Installing weak dependencies: необязательные зависимости, но рекомендуемы

            далее сумарное количество пакетов и запрашивает разрешение на установку


    Установка пакета ручная после скачивания пакета  RPM

        ранее не было YUM и все было необходимо скачивать и устанавливать в ручную
        каждый раз оно ругалось на то, что чего-то не хватает
        и раз за разом надо было искать нужный пакет и устанавливать его
        YUM это делает за нас и сразу выдает все что необходимо

        Но есть и большое НО, под спецефичные кастомные задачи 
        иногда приходиться подискивать специальные репозитории и устанавливать их



    Есть новая разработка после YUM - DNF 
        имеет теже функции и может даже расширенные, совместимо между собой, проверил, базовые функции работают


Стандартные потоки ввода/вывода 

    STDIN  -  < - 0
        ввод информации, по умолчанию таким являеться клавиатура

    STDOUT -  > - 1
        для примера это есть терминал и то что выводиться на него при помощи команды ls

    STDERR - 2> - 2
        поток ошибок который воводиться на терминал, если его не перенаправили


    ДЛЯ примера используя команду cat перенаправим вывод содержимого файла в запись в другой файл,
    это будет выглядеть так (если файл не существует - создасться, если существует - перезапишеться):

        cat TESTFILE > test_messages

    для дополнения файла (запись в конец файла) нужно ставить двойной знак перенаправления

        cat TESTFILE >> test_messages

    можно создать файл:

        cat > test5
        далее ввести с клавиатуры содержимое файла и закончить сочетанием Ctr+D 

    можно создать файл и выбрать для него источник содержимого из другого файла, это как первый, только наоборот:

        cat > test_messages < TESTFILE

    перенаправление ошибок:

        cat test7 2> error_test_log

    комбинирование:
        содержимое двух файлов перенаправляю в третий и ошибки в случае возникновения
        перенаправляю в также в третий файл, то есть инфо и ошибки  - перенаправляються в один поток

            cat TESTFILE kurwa_bobra > test_messages  2>&1


