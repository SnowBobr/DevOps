Debian 12


Расширенные команды

    для частичного просмотра содержимого файла или не только файла
    нужно использовать такую конструкцию

        cat 1.txt|head -2  --  покажет первые две строки файла, количество строк можно изменять )
        cat 1.txt|tail -3  --  покажет последние две строки файла, количество строк можно изменять )

        ls -l /etc|tail -10

    открытие файла или списка что бы почиталь листая его с помощью клавиатуры можно с помощью такой команды:

        less /etc/systemctl.conf

        что бы найти определенный текст в данном файле достаточно ввести:

            /{искомое выражение/слово/значение}
            все результаты будут выделенны в файле

        второй вариант использования постраничного просмотра документа с возможностью навигации
        на примере справочной информации

            ls --help|less

        есть еще команда для просомтра с возможностью просмотра только от начала до конца без реверса

            ls --help|more


    вывод данных по вхождению, так же есзвестное как grep

        grep it<helpfile

        команда выведет все строки файла helpfile, где встречаеться it


    ПОТОК ВЫВОДА при успешном и неуспешном выполнении команды

        пример синтаксиса {команда} {если успешно, неуспешно}  {действие}

            cat 13.txt && echo "ok" -- успешно
            cat 13.txt || echo "ok"  -- неуспешно

            можно как выводить текст на экран, так и писать в лог файл, создавать файлы и вообще любые действия


    вывод всех своих действий 

        history  --  просто покажет историю всех наших действий

        history|less  --  покажет историю всех наших действий с возможностью прокрутки и поиска

        history>history.txt  -- запишет историю действий в файл history.tx


файлы и каталоги

    команда touch

        кроме стандартного создания файла можно еще изменять метаданные

        touch -t 204401121010 file.txt  --  изменит дату создания на 2044.01.12 10:10
        touch -r file.txt newfile.txt  --  передаст метаданные о создании файла от  file.txt  файлу newfile.txt


    команда mkdir

        позволяет создавать каталоги

        mkdir -p 1/2/3/4/5  --  создаст пул каталогов с вложенными каталогами


    командра rm

        позволяет удалять файлы и каталоги

        rm -R {имя каталога}  --  удаляет каталог со всеми вложенными файлами и каталогами

        самая частоипользумая конструкция по удалению

        rm -rf {имя каталога}  --  удаляет каталог рекурсивно и форсировано (без вопросов)
        со всеми вложенными файлами и каталогами, так же как и первый вариант

    
    команда cp

        позволяет копировать файлы и папки

        cp {что копируем}  {куда копируем}

        cp -r newfolder /etc/files/  --  копирует рекурсивно с вложенными файлами
            не копирует файлы и каталоги к которым нету доступа

        cp -u newfolder /etc/files/  --  самая важная и частоиспользуемая функция, не перезатирает новые файлы старыми

        cp -r folder_backups/* etc/files/  --  копирует все файлы из папки folder_backups в папку /etc/files/
            так же как и в винде * - это символ маски, его можно применять по тем же правилам

        
    команда mv

        позволяет переименовывать и перемещать файлы и каталоги

        mv {что переименовываем}  {на что переименовываем}
            можно перезатереть целевой файл если в месте назначения такой файл есть


Ссылки

    символические ссылки  (точка входа) аналог ярлыка в винде - 

        команда ln

            ln -s 13.txt link_13.txt
                создает символическую ссылку на файл, при удалении исходного файла остаеться ссылка
                на несуществующий файл и подсвечиваеться красным, при попытке обращения выдает ошибку

                использование символических ссылок не рекомендуется с точки зрения безопасности и запутанности


    жесткие ссылки - 

        команда ln

            ln {исходный файл} {новый файл - жесткая ссылка}

                при использовании команды ls -l с ключем отображения метаданных 
                второй блок информации указывает сколько жестких ссылок есть к этому файлу

                все такие файлы связанные между собой имеют общие данные и изменения одного
                из них ведет к изменению и других, хотя правильнее сказать что все они 
                ссылаються на туже область хранения данных и являються одним и тем же файлом

                удаление любого из них не приводит к потере данных, и только удалив все связанные файлы
                удаляеться содержимое

                подитоживая, на самом деле все файлы и каталоги являються
                всего лишь жжесткими ссылками на область памяти, и используя данную
                команду - всего лишь прописываем новую точку входа

                создание жесткой ссылки на другой раздел не возможно, все они работают только внутри 
                одного раздела


Монтирование разделов

    команда mount
    
    mount -t {тип файловой системы} {ключи опций} {непосредственно устройство} {куда/точка монтирования}

    простое монтирование без определения файлово системы и ключей
        mount /dev/sda1 /home/test/  --  смонтировали локальный диск к хомяку текст

    отмена монтирования
        umount /home/test/

    при подключении внешнего устройства (флешки) можно ее монтировать в любое необходимое место


Установка пакетов (ПО)

    команда dpkg 
        самурай который видит цель и не видит препятствий, устанавливает или удаляет пакет, без зависимостей

        dpkg --list  --  выводит список всех установленых пакетов и их версий

        dpkg --list apt  --  выводит информацию о установленом пакете

        dpkg --status apt  --  выводит ПОДРОБНУЮ информацию о установленом пакете

        dpkg --listfiles apt  --  выводит список файлов которые были установлены пакетом

        dpkg --search python*  --  покажет кто установил пакеты где упоминается пайтон (потому что со звездочкой)

        dpkg --install {полное имя пакета} --  установка пакета (пакет необходимо заранее скачать)
        dpkg -i {полное имя пакета} --  установка пакета (пакет необходимо заранее скачать)

        dpkg --remove {имя пакета} --  удаляет установленный пакет

        dpkg -purge {полное имя пакета} --  удаление пакета и ВСЕХ файлов связанных с ним


    команда apt
        пакетный установщик, дружелюбный и удобный
        apt == apt-get - равнозначно, второй вариант это более старый вариант приложения

        команда apt
            apt download  --  скачивает пакет, без установки 

            apt search  --  поиск заданной строки среди пакетов

            apt show  --  показывает информацию о пакете, зависимости, конфликты, занимаемое пространство и т.д.

            apt update  --  выводит какие пакеты в системе могут быть обновлены

            apt list --upgradable  --  выводит список пакетов которые могут быть обновлены и версии

            apt upgrade  --  обновляет пакеты в системе, но в пределах своей версии
                это значит что обновляеться python 3.0.9 до python 3.9.9, но не до 4.0.0

            apt full-apgrade  --  обновляет на в рамках своей версии, а до максимально доступной версии ПО

            apt remove  --  удаляет пакет

            apt purge  --  удаляет со всем зависимостями и установленніми файлами

            apt moo  --  пасхалка, веселенкая коровка


VIM

    vim  --  открывает файл для редактирования, если его нету, создаст и откроет

    БАЗА по работе с редактором

        
        кнопка esc  --  для выхода в режим команд

        в режиме командной строки
            :w  -- для сохранения
            :wq  --  для сохранения и выхода из редактора
            :q!  --  выйти без сохранения изменений
            :set number  --   включит подсветку номеров строк в файле
            :split {имя второго файла}  --  переход в многооконный горизонтальный режим
            :vsplit {имя второго файла}  --  переход в многооконный вертикальный режим

            для перехода между окнами

                ctrl + w  и стрелкой выбираем файл
                ctrl + ww  если два файла просто перемещаемся между ними


        поиск
            стартуем чер /   который находиться возле шифта
            n  --  следующий результат поиска
            N  --  предидущий результат поиска

        в режиме команд
            i - вход в режим редактирования
            shift + a - вход в режим редактирования
            u - выйти не записав последние изменения, откатить изменения
            shift + u - выйти не записав последние изменения, откатить изменения
            r - заменить символ под курсором
            dw - удаляет слово от того места где стоит каретка
            dd - удалить строку целиком
            v - режим визуализации, можно выделить текст, скопировать, вырезать и т.д.
            shift + v - выделяет строку
            y - копирует в буфер
            x - вырезать в буфер
            p - вставлет из буфера

        режим буферов
            shift + " - переходим в режим именованых буферов обмена и выбираем какой буфер использовать
                а далее все остальные команды. как копировать, вставить, так можно держать 
                в разных буферах разную инфу и оперативно переносить ее из файла в файл


    Расширенные возможности

        .vimrc  --  есть глобальный файл, который задает настройки редактора при открытии
                    так же можно создать такой файл и положить в хомяк пользователя
                    в таком случае для пользователя будут применяться именно эти настройки при стартуем

            в этом файле можно задавать настройки в  формате "режим командной строки  --  :set number"
    

Работа с HDD, USB
    
    blkid  --  вывод на экран всех носителей в системе

    /etc/fstab  --  файл со всеми носителями и точками монтирования

        далее что бы добавить флешку на постоянку и монтировать в то же место, нужно в этом файле прописать
        весь порядок:
            {UUID - уникальный номер влешки} {место куда монтировать} {файловая система} {опции} {дамп} {важность раздела????}
        пример:
            UUID="f584-dgt3" /home/test/usbflash vfat defaults 0 2    


Пользователи и группы

    /etc/passwd  --  файл со всеми пользователями
        getent passwd {имя пользователя}  -- команда для получения информации о конкретном пользователе

    /etc/shadow  --  файл с зашифрованніми паролями пользователя

    /etc/nsswitch.conf  --  список источников информации о пользователях и групах

    /etc/skel  --  отсюда копируеться базовая инфа всем новым пользователям

    /etc/group  --  все группы пользователей

    /etc/motd  --  текстовый файл, содержимое которого выводиться на экран при входе в систему

    команды пользователя

        useradd {имя пользователя}  --  создает пользователя
                учетка создаеться без пароля, без домашнего каталога, минималочка

        passwd {имя пользователя}  --  задаем пароль пользователю

        adduser  --  создает пользователя, с каталогом ,группой и прочими атрибутами ,даже запрашивает пароль

        usermod  --  изменение учетной записи

            ключи:
            -d  --  изменение домашнего каталога
            -m -d  --  переместит домашний каталог вместе с содержимым
            -l  --  изменение имени пользователя
        
        userdel  --  удаляет пользователя из системы

        usermod dem -s /bin/false  --  так создаеться заглушка. принцип действия, при авторизации пользователя вместо 
            оболочки шел - пользователю отключаеться старт какой либо оболочки и выбрасывает из сеанса

        пользователь не должен существовать безконечно, для этого необходимо при создании ставить ограничение по времени
        на активность учетной записи, или же ставить стандартом 3,6 месяцев и каждый период сриптом продлевать их срок 
        актуальности, это очень важно с точки зрения безопасности

        usermod -L {username}  --  заблокировать пользователя
        usermod -U {username}  --  разблокировать пользователя

        usermod {username} -e 2024-10-11  --  установить дату до которой учетка активна

        chage -l {username}  --  show information about user
            так же с помощью этой команды но других ключей можно изменять параметры учетной записи


    команды группы

        groups {имя пользователя}  --  показывает к каким групам принадлежит пользователь

        addgroup  admins --  создать новую группу

        usermod bobr -g admins -- смена главной группы пользователя на другую
        
        usermod bobr -G admins,test,dem  --  ЗАМЕНЯЕМ групы пользователя
            если так прописывать, то перезаписывает список принадлежащих вторичных группо
            то есть, если прописать только одну новую группу, все старые сотруться

        usermod bobr -а -G admins,test,dem  --  добавляем групы к пользователю
            корректно и без удаления остальных групп
        
        groupdel  --  удаляет группу




