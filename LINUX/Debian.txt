Debian 12


Расширенные команды

    для частичного просмотра содержимого файла или не только файла
    нужно использовать такую конструкцию

        cat 1.txt|head -2  --  покажет первые две строки файла, количество строк можно изменять )
        cat 1.txt|tail -3  --  покажет последние две строки файла, количество строк можно изменять )

        ls -l /etc|tail -10

    открытие файла или списка что бы почиталь листая его с помощью клавиатуры можно с помощью такой команды:

        less /etc/systemctl.conf

        что бы найти определенный текст в данном файле достаточно ввести:

            /{искомое выражение/слово/значение}
            все результаты будут выделенны в файле

        второй вариант использования постраничного просмотра документа с возможностью навигации
        на примере справочной информации

            ls --help|less

        есть еще команда для просомтра с возможностью просмотра только от начала до конца без реверса

            ls --help|more


    вывод данных по вхождению, так же есзвестное как grep

        grep it<helpfile

        команда выведет все строки файла helpfile, где встречаеться it


    ПОТОК ВЫВОДА при успешном и неуспешном выполнении команды

        пример синтаксиса {команда} {если успешно, неуспешно}  {действие}

            cat 13.txt && echo "ok" -- успешно
            cat 13.txt || echo "ok"  -- неуспешно

            можно как выводить текст на экран, так и писать в лог файл, создавать файлы и вообще любые действия


    вывод всех своих действий 

        history  --  просто покажет историю всех наших действий

        history|less  --  покажет историю всех наших действий с возможностью прокрутки и поиска

        history>history.txt  -- запишет историю действий в файл history.tx


файлы и каталоги

    команда touch

        кроме стандартного создания файла можно еще изменять метаданные

        touch -t 204401121010 file.txt  --  изменит дату создания на 2044.01.12 10:10
        touch -r file.txt newfile.txt  --  передаст метаданные о создании файла от  file.txt  файлу newfile.txt


    команда mkdir

        позволяет создавать каталоги

        mkdir -p 1/2/3/4/5  --  создаст пул каталогов с вложенными каталогами


    командра rm

        позволяет удалять файлы и каталоги

        rm -R {имя каталога}  --  удаляет каталог со всеми вложенными файлами и каталогами

        самая частоипользумая конструкция по удалению

        rm -rf {имя каталога}  --  удаляет каталог рекурсивно и форсировано (без вопросов)
        со всеми вложенными файлами и каталогами, так же как и первый вариант

    
    команда cp

        позволяет копировать файлы и папки

        cp {что копируем}  {куда копируем}

        cp -r newfolder /etc/files/  --  копирует рекурсивно с вложенными файлами
            не копирует файлы и каталоги к которым нету доступа

        cp -u newfolder /etc/files/  --  самая важная и частоиспользуемая функция, не перезатирает новые файлы старыми

        cp -r folder_backups/* etc/files/  --  копирует все файлы из папки folder_backups в папку /etc/files/
            так же как и в винде * - это символ маски, его можно применять по тем же правилам

        
    команда mv

        позволяет переименовывать и перемещать файлы и каталоги

        mv {что переименовываем}  {на что переименовываем}
            можно перезатереть целевой файл если в месте назначения такой файл есть


Ссылки

    символические ссылки  (точка входа) аналог ярлыка в винде - 

        команда ln

            ln -s 13.txt link_13.txt
                создает символическую ссылку на файл, при удалении исходного файла остаеться ссылка
                на несуществующий файл и подсвечиваеться красным, при попытке обращения выдает ошибку

                использование символических ссылок не рекомендуется с точки зрения безопасности и запутанности


    жесткие ссылки - 

        команда ln

            ln {исходный файл} {новый файл - жесткая ссылка}

                при использовании команды ls -l с ключем отображения метаданных 
                второй блок информации указывает сколько жестких ссылок есть к этому файлу

                все такие файлы связанные между собой имеют общие данные и изменения одного
                из них ведет к изменению и других, хотя правильнее сказать что все они 
                ссылаються на туже область хранения данных и являються одним и тем же файлом

                удаление любого из них не приводит к потере данных, и только удалив все связанные файлы
                удаляеться содержимое

                подитоживая, на самом деле все файлы и каталоги являються
                всего лишь жжесткими ссылками на область памяти, и используя данную
                команду - всего лишь прописываем новую точку входа

                создание жесткой ссылки на другой раздел не возможно, все они работают только внутри 
                одного раздела


Монтирование разделов

    команда mount
    
    mount -t {тип файловой системы} {ключи опций} {непосредственно устройство} {куда/точка монтирования}

    простое монтирование без определения файлово системы и ключей
        mount /dev/sda1 /home/test/  --  смонтировали локальный диск к хомяку текст

    отмена монтирования
        umount /home/test/

    при подключении внешнего устройства (флешки) можно ее монтировать в любое необходимое место


Установка пакетов (ПО)

    команда dpkg 
        самурай который видит цель и не видит препятствий, устанавливает или удаляет пакет, без зависимостей

        dpkg --list  --  выводит список всех установленых пакетов и их версий

        dpkg --list apt  --  выводит информацию о установленом пакете

        dpkg --status apt  --  выводит ПОДРОБНУЮ информацию о установленом пакете

        dpkg --listfiles apt  --  выводит список файлов которые были установлены пакетом

        dpkg --search python*  --  покажет кто установил пакеты где упоминается пайтон (потому что со звездочкой)

        dpkg --install {полное имя пакета} --  установка пакета (пакет необходимо заранее скачать)
        dpkg -i {полное имя пакета} --  установка пакета (пакет необходимо заранее скачать)

        dpkg --remove {имя пакета} --  удаляет установленный пакет

        dpkg -purge {полное имя пакета} --  удаление пакета и ВСЕХ файлов связанных с ним


    команда apt
        пакетный установщик, дружелюбный и удобный
        apt == apt-get - равнозначно, второй вариант это более старый вариант приложения

        команда apt
            apt download  --  скачивает пакет, без установки 

            apt search  --  поиск заданной строки среди пакетов

            apt show  --  показывает информацию о пакете, зависимости, конфликты, занимаемое пространство и т.д.

            apt update  --  выводит какие пакеты в системе могут быть обновлены

            apt list --upgradable  --  выводит список пакетов которые могут быть обновлены и версии

            apt upgrade  --  обновляет пакеты в системе, но в пределах своей версии
                это значит что обновляеться python 3.0.9 до python 3.9.9, но не до 4.0.0

            apt full-apgrade  --  обновляет на в рамках своей версии, а до максимально доступной версии ПО

            apt remove  --  удаляет пакет

            apt purge  --  удаляет со всем зависимостями и установленніми файлами

            apt moo  --  пасхалка, веселенкая коровка




