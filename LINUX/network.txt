
COMANDS

    ip a 
        выводит список сетевых подключений с настройками

    ip addr add 192.168.0.13/24 dev enp0s3
        ВРЕМЕННО (до перезагрузки) добавляет адрес 192.168.0.13 с маской 24 (255.255.255.0) для устройства enp0s3
            маску можно подсчитать так 255.255.255.0 = 11111111.11111111.11111111.0 
            то есть 24 единицы, сумируем и получаем 24

    
FILES

    /etc/network/interfaces  --  файл с конфигурациями сетевых подключений

        по умолчанию машина получает адрес по DHCP, это необходимо поменять на статику:
            это:
            allow-hotplug enp0s3
            iface enp0s3 inet dhcp 

            меняем на это:  (стандартный пример, адрес и маска сети в реальности могут отличатся)
            allow-hotplug enp0s3
            iface enp0s3 inet static
            address 192.168.0.1
            netmask 255.255.255.0

    /etc/hosts

        локальный файл с списком хостов
        с его помощью можно обойтись без днс сервера, если необходимо прописать парочку хостов
        ну или в учебных/тренировочных целях


DNS
    DNS  --  позволяет обращаться к хостам по имени
             если этого сервера в сети нету, в есть файл с хостами где напрямую можно прописать 
             ip и имя хоста и тогда анналогично можно обращаться по имени


DHCP
    DHCP  --  позволяет автоматически раздавать ip адреса в сети

    установка сервера -- apt install isc-dhcp-server

    файл конфигурации  --  /etc/default/isc-dhcp-server

        настройки:

            раскоментировать строки с DHCPDv4
            INTERFACESv4 - заполняем
    
    файл конфигурации  --  /etc/dhcp/dhcpd.conf

        настройки:

            option domain-name-servers {тут разная лабуда, меняем на нужный нам ip - 192.168.1.100}


            subnet declaration  -- раскоментируем (строки: subnet, range, {)
            subnet 192.168.1.0 netmask 255.255.255.0 {
                athoritative;  --  покажет устройствам в сети что это основной dhcp сервер
                range 192.168.1.50 192.168.1.99  --  диапазон выделяемых адресов

    файл с текущими подключенными устройствами  --  /var/lib/dhcp/dhcpd.leases

    net-tools  --  сервис для просмотра и управления сетевыми подключениями
        не входит в стандартный пакет, станавливается apt install net-tools

        команды:
            ifconfig  --  показывает текущие сетевые подключения


SSH
    средство обеспечения защищенного доступа к удаленному узлу

    установка SSH сeрвера  --  apt install openssh-server

        файлы конфигурации
            /etc/ssh/sshd_config
                тут можно менять дотуя настроек, в том числе подключение по руту, изменить порт подключения и т.д.


    установка SSH клиента  --  apt install openssh-client

        подключение  --  ssh -l {user} {host -- ip pc -- 192.168.1.100}
        подключение второй вариант  --  ssh -p {PORT} {USER}@{host -- ip pc -- 192.168.1.100}
        отключение  --  exit

        подключение по определенному порту --  ssh -l {user} -p {PORT} {host -- ip pc -- 192.168.1.100}
        копирование файла по сети  используя ssh  --  scp -P {PORT} {file} {user}@(HOST):{destination folder}
        копирование файла по сети  используя ssh в обратную сторону --  scp -P {PORT} {user}@(HOST):{file} {destination folder}


    Настройки БЕЗОПАСНОСТИ

        файлы и действия:

            /etc/hosts.allow  --  тут прописываем хосты с которых разрешен доступ
                sshd: 192.168.1.50   --  так прописываються Разрешенные хосты

            /etc/hosts.deny  --  тут прописываем хосты которым доступ ЗАПРЕЩЕН
                sshd: allow  --  так запрещаем все кроме разрешенных

        КЛЮЧИ
            закрытый  --  шифрует  --  id_rsa
            открытый  --  дешифрует  --  id_rsa.pub

        ОЧЕНЬ ВАЖНО ПОМНИТЬ
            открытый ключ генерируется и отдаеться той машине к которой хотим иметь доступ
            клиент генерирует и отдает серверу  ---  тогда клиент может подключиться к серверу

        генерируем пару ключей  --  ssh-keygen
            Под каждым пользователем отдельно генерируются ключи
            запрашивает место хранения ключа
            запрашивает пароль на ключ

        копируем открытый ключ  --  ssh-copy-id {USER}@{HOST}
        он копируется в  --  ~/.ssh/authorized_keys

        Запрещаем логиниться под паролем, можно логиниться имея ключ
            в настройках сервера ssh  раскоментируем настройку  --  PasswordAuthentication  --  и изменяем "yes" на "no" 


SYSTEMCTL

    система которая отвечает за все процессы
    формат запуска:

        systemctl { команда - что делаем }  { процесс - над чем делаем }

            команды:

                status, restart, start, stop, enable, desible
                list-units


SUDO

    su {USER}  --  входит в виртуальный аакаунт, чем то похоже на вход ssh, но только внутри локальной машины
        небезопасно


    sudo {любая команда с обычным синтаксисом}  --  запускает люьую команду с правами рута

    sudo -l         --  спиок всех доступных команд
    sudo -u {USER}  --  список всех доступных команд для конкретного {USER}

    sudo -u {USER} {COMMAND}  --  выполнение команды от имени указанного пользователя

    настройки доступа пользователям к использованию SUDO

        etc/sudoers  --  но его редактировать вручную нельзя
        редактируем командой  --  visudo
            откроется встроенный редактор, больше похож на NANO

            параметры:
                User peivilege specification
                    пользователь может выполнять на хосте от имени пользователя и группы 
                    соответствующие команды 
                        {USER}  {HOST}({USER}:{GROUP}) {COMMANDS} 
                    root    ALL=(ALL:ALL) ALL
                    admin    ALL=(ALL:ALL) ALL

                Allow members of group sudo to execute any command
                    
                    % - показывает что имееться в виду группа, а не пользователь

                    %root    ALL=(ALL:ALL) ALL

                    test    ALL=(ALL:ALL) NOPASSWD:ALL, PASSWD:/bin/date
                        так задаеться доступ для выполнения  с паролем или без пароля
                        всех всех приложений или конкретных
                    

БЕЗОПАСНОСТЬ

    политики безопасности: (пример на основе CentOS, RH)
        enforcing  --  проверяет действие на правила, если правило не соблюдено
                       действие блокируется
        permissive  -- так же как и выше, но не блокирует а только записывает логи о 
                       совершшаемых действиях
        disabled  --   политики не будут проверяться

        проверка текущей политики безопасности команда  --  getenforce 

            поменять временно  --  setenforce {на что меняем, выбрать политику}

            поменять на постоянку, отредактировать файл  --  /etc/selinux/config

    пример на Debian  -- APPARMOR

        проверка текущей политики безопасности  -- apparmor_status

        утилита для работы с apparmor  --  apparmor-utils

            смена режима для aa-enforce /user/bin/man 
                перевели справочник в другую политику безопасности


IPROUTES

    ip link  --  показывает сетевые устройства

    ip link set {name (enp0s3)} down  --  оключить сетевую карту

    ip link set {name (enp0s3)} up  --  включить сетевую карту

    ip link set {name (enp0s3)} address {MAC address}  --  сменить MAC адрес сетевой карты
                                                           только при отключенной карте

    ip a add {ip-address} dev {name (enp0s3)} --  добавляем к устройству еще один адрес                                                      
    ip a delete {ip-address}/{netmask} dev {name (enp0s3)} --  удаляем адрес
                                                        первичные лучше не удалять
                                                        воизбежание проблем

    ip route show  --  показывает маршрут связи с миром )

    ip route add default via {ip-address}  --  добавляем маргрут по умолчанию
                                                сервер через который мы будем ходить 
                                                дальше

    ip route delete default  --  удаляем маргрут по умолчанию


NETBOX
    позволяет вести всю документацию по сети предприятия, абсолютно всю

    УСТАНОВКА
        установка пакетов необходимых для NetBox
            apt install sudo vim curl python 
        postgresql 
            затем постгрес стартануть и поставить автозагрузку

            запускаем от пользователя который появляется при разворачивании субд 
                sudo -u postgres psql 
            создаем базу и пользователя (уже под пользователем субд)
                CREATE DATABASE netbox;
                CREATE USER netbox WITH PASSWORD '1111';
            даем пользователю права доступа к будем
                GRANT ALL PRIVILEGES ON DATABASE netbox TO netbox;

            проверяем все ли работает, запрашивая соединение с бд от пользователя
                psql --username netbox --password --host localhost netbox

                если все окей, дальше будет видно что работаем от пользователя netbox
                для проверки состояния подключения и вывода инфо команда:

                    /conninfo
                
                проверка прав доступа пользователя
                    \dn+

                вывести все бд
                    \l 

                вывести всех пользователей 
                    \du

            могут возникнуть проблемы с правами доступа, решил кустарно
            дал скрипту вход в субд вместо netbox суперпользователя - postgres
            

        REDIS  --  утсановка, субд

            apt install redis-server

            проверка работает лиЖ
                redis-cli ping
                    ответ должен быть
                        PONG

        следующий набор обязательных пакетов
        apt install
            python3
            python3-pip
            python3-venv
            python3-dev
            build-essential
            libxml2-dev
            libxslt1-dev
            libffi-dev
            libpq-dev
            libssl-dev
            zlib1g-dev

        Обязательно ставим git
            apt install git


        В официальной документации описано что необходимо создавать в 
            каталоге opt подкаталог для netbox, но это ошибка
            идем в корень и дальше каталог opt (/opt)
            и туда заливаем то что нам необходимо

            git clone -b master --depth 1 hhtps://github.com/netbox-community/netbox.git

        создаем пользователя системы для netbox:
            adduser --system --group netbox
        даем ему права на папку:
            chown -R netbox /opt/netbox/netbox/media

        дальше работает с файлом конфигурации, предварительно его нужно скопировать, для сохранности
            и работаем с копией: configuration.py

            /opt/netbox/netbox/netbox/configuration_example.py

                ALLOWED_HOSTS = {IP}
                DATABASE
                    прописываем бд, пользователя, пароль
                SECRET_KEY
                    генерируем с помощью пайтон скрипта в каталоге на уровень выше
                        generate_secret_key.py
                    результат записываем в файл, файл копируем в каталог с конфой
                    оттуда сплитом в виме открываем и добавляем в нужном месте ключ

        обновление структуры, добавление связей ,заполнение бд и прочее
        для этого запускаем скрипт (bash upgrade.sh) 
        который находиться на два уровня выше

        перезапускаем процессы systemctl daemon-reload

        идем в /opt/netbox/venv/bin
        и запускаем source activate  --  активируем виртуальное окружение

        идем в /opt/netbox/netbox

        создаем рута для нетбокса  --  python3 manage.py createsuperuser
        
        стартуем сервер в режиме разработчика  -- python3 manage.py runserver 0.0.0.0:800 --insecure


    РАЗВОРАЧИВАНИЕ НА СЕРВЕРЕ ДЛЯ АВТОЗАПУСКА И работы

        gunicorn
            файлы кончигурации  --  /opt/netbox/contrib
            на выбор разворачивание на nginx / apach
            копируем файл gunicorn.py на уровень выше

            устанавливаем netbox как сервис
                переносим файлы
                    cp -v *.service /etc/systemd/system

            добавляем сервисы в автозагрузку и стартуем их

                systemctl daemon-reload
                systemctl start netbox netbox-rq
                systemctl enable netbox netbox-rq
        
        nginx
            apt install -y nginx

            ssl   --   это тестовое создание, в реальном случае ключи покупаются
                openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/netbox.key -out /etc/ssl/certs/netbox.crt
                заполняем требуемые поля, страна, город, и т.д.

            копируем файл конфигурации cp /opt/netbox/contrib/nginx.conf /etc/nginx/sites-available/netbox
            далее прописывем настройки:
                server_name -- {IP}
                создаем на него ссылку
                    ln -s /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox
                рестартуем nginx   


    НАСТРОЙКА 

        далее можно вносить всю экосистему предприятия, с каждым устройством и всеми настройками для 
        хранения и дальнейшего использования
    

PARTED | MOUNT   ---   РАЗДЕЛЫ | МОНТИРОВАНИЕ

    добавляем в виртуалбоксе еще один виртуальный носитель
    проверяем какие носители смонтированы  --  df -h
    проверяем какие устройства носители видит система  --  lsblk
    
    устанавливаем пакет  --  parted  (если не установлен)

        parted -l  --  показывает все доступные устройства
        parted {устройство  -  /dev/sdb}  --  запускаем утилиту и начинаем работать внутри ее оболочки

            mklabel gpt  --  создаем метку диску
            print  --  выводим информацию об устройстве
            mkpart {name  -  database} {filesystem  -  ext4} {from  -  1MB} {size  -  10,7GB}
                (mkpart database ext4 1MB 10,7GB)

    mkfs -t ext4 /dev/sdb1  --  форматируем новый диск
    mkdir postgresql  --  создаем в корне папку к которой будем монтировать диск
    mount -/dev/sdb1 /postgresql/  --  монтируем диск
    vim /etc/fstab  --  редактируем файл смонтированых дисков что бы после перезагрузки все изменения были в силе 
        blkid  --  показывает UUID  --  правильно вписывать по нему, иначе могут быть проблемы
        

POSTGRESQL move another part 

    sudo -u postgres psql  --  заходим в оболочку постгрес
        show data_directory;  --  показать где находятся файлы бд
        выходим из оболочки постгрес
    останавливаем службу постгрес

    RSYNC 
        устанавливаем rsync 

            rsync -av /var/lib/postgresql/15/ /postgres/  --  выполняем копирование
            ключи обозначают полное копирование и вывод информации

    заходим в оригинальное место /var/lib/postgresql/15/
    переименовываем папку бд что бы никакие службы не могли иметь к ней доступ
        mv main main.bk 

    нужно дать приложению информацию о новом месторасположении файлов бд
    редактируем файл /etc/postgresql/15/main/postgresql.conf
        прописываем новый путь к файлам

    запускаем службу, если все правильно - служба стратанула и можно
        зайти проверить в оболочке постгрес где хранятся файлы бд



